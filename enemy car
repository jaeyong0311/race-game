using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CarController2 : MonoBehaviour
{
    public float moveSpeed = 5f; // 자동차 이동 속도
    
    public float originalMoveSpeed; // 원래 속도
    public float currentMoveSpeed;  // 현재 속도
    private void Start()
    {
        // 5초 후에 MoveCar 함수를 호출하여 자동차를 이동시킴
        Invoke("MoveCar", 5f);
        Invoke("UnfreezeRigidbody", 5f);
        enabled = false;
        Rigidbody rb = GetComponent<Rigidbody>();
        rb.constraints = RigidbodyConstraints.FreezeAll;

        currentMoveSpeed = originalMoveSpeed;

    }

    void MoveCar()
    {
        enabled = true;
    }
    public Transform[] waypoints; 
    public float speed = 5f; 
    public float rotationSpeed = 2f;
    private int currentWaypointIndex = 0; 
  
    void UnfreezeRigidbody()
    {
        Rigidbody rb = GetComponent<Rigidbody>();
        rb.constraints = RigidbodyConstraints.None;
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Wall")) // "Wall" 태그를 가진 콜라이더에 충돌했을 때
        {
            // 현재 속도를 절반으로 줄입니다.
            currentMoveSpeed = 0.5f;

            Debug.Log(currentMoveSpeed);
        }
        else// "Wall" 태그를 가진 콜라이더와의 충돌이 해제되었을 때
        {
            // 현재 속도를 원래 속도로 복원합니다.
            currentMoveSpeed = originalMoveSpeed;
        }

    }
    void Update()
    {
        
        if(currentWaypointIndex >= waypoints.Length)
        {
            return;
        }
        Vector3 direction = waypoints[currentWaypointIndex].position - transform.position;
        direction.y = 0;

       
        float distanceToWaypoint = direction.magnitude;

       
        if (distanceToWaypoint < 1f)
        {
            currentWaypointIndex = (currentWaypointIndex + 1) % waypoints.Length;
        }
        else
        {
           
            Quaternion targetRotation = Quaternion.LookRotation(direction);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * currentMoveSpeed * Time.deltaTime);

            
            transform.Translate(Vector3.forward * speed * currentMoveSpeed * Time.deltaTime);
        }
    }
}
